// proto/service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/service.proto

// Определяем пакет для наших сообщений и сервисов.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PartnerService_CreatePartner_FullMethodName   = "/tutorial.PartnerService/CreatePartner"
	PartnerService_GetPartnerStats_FullMethodName = "/tutorial.PartnerService/GetPartnerStats"
)

// PartnerServiceClient is the client API for PartnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с партнёрами.
type PartnerServiceClient interface {
	// Метод создания партнёра.
	CreatePartner(ctx context.Context, in *CreatePartnerRequest, opts ...grpc.CallOption) (*CreatePartnerResponse, error)
	// Метод получения статистики партнёра.
	GetPartnerStats(ctx context.Context, in *GetPartnerStatsRequest, opts ...grpc.CallOption) (*PartnerStats, error)
}

type partnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerServiceClient(cc grpc.ClientConnInterface) PartnerServiceClient {
	return &partnerServiceClient{cc}
}

func (c *partnerServiceClient) CreatePartner(ctx context.Context, in *CreatePartnerRequest, opts ...grpc.CallOption) (*CreatePartnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePartnerResponse)
	err := c.cc.Invoke(ctx, PartnerService_CreatePartner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) GetPartnerStats(ctx context.Context, in *GetPartnerStatsRequest, opts ...grpc.CallOption) (*PartnerStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnerStats)
	err := c.cc.Invoke(ctx, PartnerService_GetPartnerStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerServiceServer is the server API for PartnerService service.
// All implementations must embed UnimplementedPartnerServiceServer
// for forward compatibility.
//
// Сервис для работы с партнёрами.
type PartnerServiceServer interface {
	// Метод создания партнёра.
	CreatePartner(context.Context, *CreatePartnerRequest) (*CreatePartnerResponse, error)
	// Метод получения статистики партнёра.
	GetPartnerStats(context.Context, *GetPartnerStatsRequest) (*PartnerStats, error)
	mustEmbedUnimplementedPartnerServiceServer()
}

// UnimplementedPartnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartnerServiceServer struct{}

func (UnimplementedPartnerServiceServer) CreatePartner(context.Context, *CreatePartnerRequest) (*CreatePartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartner not implemented")
}
func (UnimplementedPartnerServiceServer) GetPartnerStats(context.Context, *GetPartnerStatsRequest) (*PartnerStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerStats not implemented")
}
func (UnimplementedPartnerServiceServer) mustEmbedUnimplementedPartnerServiceServer() {}
func (UnimplementedPartnerServiceServer) testEmbeddedByValue()                        {}

// UnsafePartnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerServiceServer will
// result in compilation errors.
type UnsafePartnerServiceServer interface {
	mustEmbedUnimplementedPartnerServiceServer()
}

func RegisterPartnerServiceServer(s grpc.ServiceRegistrar, srv PartnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartnerService_ServiceDesc, srv)
}

func _PartnerService_CreatePartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).CreatePartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerService_CreatePartner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).CreatePartner(ctx, req.(*CreatePartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_GetPartnerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).GetPartnerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerService_GetPartnerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).GetPartnerStats(ctx, req.(*GetPartnerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerService_ServiceDesc is the grpc.ServiceDesc for PartnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tutorial.PartnerService",
	HandlerType: (*PartnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePartner",
			Handler:    _PartnerService_CreatePartner_Handler,
		},
		{
			MethodName: "GetPartnerStats",
			Handler:    _PartnerService_GetPartnerStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

const (
	LinkShorteningService_ShortenLink_FullMethodName  = "/tutorial.LinkShorteningService/ShortenLink"
	LinkShorteningService_GetLinkStats_FullMethodName = "/tutorial.LinkShorteningService/GetLinkStats"
)

// LinkShorteningServiceClient is the client API for LinkShorteningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для сокращения ссылок.
type LinkShorteningServiceClient interface {
	// Метод сокращения ссылки.
	ShortenLink(ctx context.Context, in *ShortenLinkRequest, opts ...grpc.CallOption) (*ShortenLinkResponse, error)
	// Метод получения статистики по сокращённой ссылке.
	GetLinkStats(ctx context.Context, in *GetLinkStatsRequest, opts ...grpc.CallOption) (*LinkStats, error)
}

type linkShorteningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkShorteningServiceClient(cc grpc.ClientConnInterface) LinkShorteningServiceClient {
	return &linkShorteningServiceClient{cc}
}

func (c *linkShorteningServiceClient) ShortenLink(ctx context.Context, in *ShortenLinkRequest, opts ...grpc.CallOption) (*ShortenLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenLinkResponse)
	err := c.cc.Invoke(ctx, LinkShorteningService_ShortenLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkShorteningServiceClient) GetLinkStats(ctx context.Context, in *GetLinkStatsRequest, opts ...grpc.CallOption) (*LinkStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkStats)
	err := c.cc.Invoke(ctx, LinkShorteningService_GetLinkStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkShorteningServiceServer is the server API for LinkShorteningService service.
// All implementations must embed UnimplementedLinkShorteningServiceServer
// for forward compatibility.
//
// Сервис для сокращения ссылок.
type LinkShorteningServiceServer interface {
	// Метод сокращения ссылки.
	ShortenLink(context.Context, *ShortenLinkRequest) (*ShortenLinkResponse, error)
	// Метод получения статистики по сокращённой ссылке.
	GetLinkStats(context.Context, *GetLinkStatsRequest) (*LinkStats, error)
	mustEmbedUnimplementedLinkShorteningServiceServer()
}

// UnimplementedLinkShorteningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLinkShorteningServiceServer struct{}

func (UnimplementedLinkShorteningServiceServer) ShortenLink(context.Context, *ShortenLinkRequest) (*ShortenLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenLink not implemented")
}
func (UnimplementedLinkShorteningServiceServer) GetLinkStats(context.Context, *GetLinkStatsRequest) (*LinkStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkStats not implemented")
}
func (UnimplementedLinkShorteningServiceServer) mustEmbedUnimplementedLinkShorteningServiceServer() {}
func (UnimplementedLinkShorteningServiceServer) testEmbeddedByValue()                               {}

// UnsafeLinkShorteningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkShorteningServiceServer will
// result in compilation errors.
type UnsafeLinkShorteningServiceServer interface {
	mustEmbedUnimplementedLinkShorteningServiceServer()
}

func RegisterLinkShorteningServiceServer(s grpc.ServiceRegistrar, srv LinkShorteningServiceServer) {
	// If the following call pancis, it indicates UnimplementedLinkShorteningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LinkShorteningService_ServiceDesc, srv)
}

func _LinkShorteningService_ShortenLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkShorteningServiceServer).ShortenLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkShorteningService_ShortenLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkShorteningServiceServer).ShortenLink(ctx, req.(*ShortenLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkShorteningService_GetLinkStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkShorteningServiceServer).GetLinkStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkShorteningService_GetLinkStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkShorteningServiceServer).GetLinkStats(ctx, req.(*GetLinkStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkShorteningService_ServiceDesc is the grpc.ServiceDesc for LinkShorteningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkShorteningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tutorial.LinkShorteningService",
	HandlerType: (*LinkShorteningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortenLink",
			Handler:    _LinkShorteningService_ShortenLink_Handler,
		},
		{
			MethodName: "GetLinkStats",
			Handler:    _LinkShorteningService_GetLinkStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
